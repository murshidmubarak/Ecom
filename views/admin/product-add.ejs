<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <meta name="csrf-token" content="<%= csrfToken %>">
    
    <style>
        :root {
            --sidebar-width: 250px;
            --sidebar-collapsed-width: 70px;
            --header-height: 60px;
            --primary-color: #cbcfda;
            --secondary-color: #858796;
            --dark-bg: #1a1a1a;
            --card-bg: #242424;
            --text-color: #e4e4e4;
            --fluorescent-green: #2b08ee;
            --gradient-green: linear-gradient(135deg, #b0aec8, rgb(120, 100, 100));
        }
        body {
            background-color: var(--dark-bg);
            color: var(--text-color);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin-left: var(--sidebar-width);
        }
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: var(--sidebar-width);
            background: linear-gradient(180deg, #010612 0%, #224abe 100%);
            transition: all 0.3s ease;
            z-index: 1000;
            padding-top: var(--header-height);
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.5);
        }
        .sidebar.collapsed {
            width: var(--sidebar-collapsed-width);
        }
        .sidebar-header {
            position: fixed;
            top: 0;
            left: 0;
            width: var(--sidebar-width);
            height: var(--header-height);
            background: rgba(1, 6, 18, 0.9);
            display: flex;
            align-items: center;
            padding: 0 1rem;
            transition: all 0.3s ease;
            z-index: 1001;
        }
        .sidebar.collapsed .sidebar-header {
            width: var(--sidebar-collapsed-width);
        }
        .logo-full {
            display: flex;
            align-items: center;
            color: white;
            text-decoration: none;
            font-size: 1.5rem;
            font-weight: bold;
        }
        .logo-mini {
            display: none;
            color: white;
            text-decoration: none;
            font-size: 1.5rem;
            font-weight: bold;
        }
        .sidebar.collapsed .logo-full {
            display: none;
        }
        .sidebar.collapsed .logo-mini {
            display: block;
        }
        .nav-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            border-radius: 0.5rem;
            transition: all 0.3s ease;
        }
        .nav-link:hover {
            color: white;
            background: var(--gradient-green);
        }
        .nav-link i {
            width: 20px;
            text-align: center;
            margin-right: 1rem;
        }
        .sidebar.collapsed .nav-link span {
            display: none;
        }
        .sidebar.collapsed .nav-link i {
            margin-right: 0;
        }
        .content-main {
            padding: 2rem;
        }
        .card {
            background-color: var(--card-bg);
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
        }
        .form-control {
            width: 100%;
            padding: 0.5rem;
            margin-bottom: 1rem;
            border-radius: 0.25rem;
            border: 1px solid var(--secondary-color);
            background-color: var(--dark-bg);
            color: var(--text-color);
        }
        .btn {
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            border: none;
            background-color: var(--fluorescent-green);
            color: white;
            cursor: pointer;
        }
        .btn:hover {
            background-color: #1a0699;
        }
        .error-message {
            color: red;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
            display: none;
        }
        .thumbnails-container {
            display: flex;
            overflow-x: auto;
            padding: 10px 0;
            gap: 10px;
        }
        .thumbnail {
            position: relative;
            flex: 0 0 auto;
        }
        .thumbnail img {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 4px;
        }
        .remove-icon {
            position: absolute;
            top: -5px;
            right: -5px;
            background: red;
            color: white;
            width: 15px;
            height: 15px;
            border-radius: 50%;
            text-align: center;
            cursor: pointer;
            font-size: 12px;
            line-height: 15px;
        }
        .image-cropper {
            margin: 10px 0;
            max-width: 400px;
            display: none;
        }
        .cropper-container {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <nav class="sidebar">
        <div class="sidebar-header">
            <a href="#" class="logo-full">
                <i class="fas fa-shopping-bag me-2"></i>
                Admin
            </a>
            <a href="#" class="logo-mini">
                <i class="fas fa-shopping-bag"></i>
            </a>
        </div>
        <div class="nav flex-column p-3">
            <a href="/admin/dashboard" class="nav-link mb-2"><i class="fas fa-th-large"></i><span>Dashboard</span></a>
            <a href="/admin/products" class="nav-link mb-2"><i class="fas fa-box"></i><span>Products</span></a>
            <a href="/admin/ordermanagement" class="nav-link mb-2"><i class="fas fa-shopping-cart"></i><span>Orders</span></a>
            <a href="/admin/users" class="nav-link mb-2"><i class="fas fa-users"></i><span>Users</span></a>
            <a href="/admin/categories" class="nav-link mb-2"><i class="fas fa-tags"></i><span>Categories</span></a>
            <a href="/admin/returnRequests" class="nav-link mb-2"><i class="fas fa-undo-alt"></i><span>Returns & Refunds</span></a>
            <a href="/admin/coupons" class="nav-link mb-2"><i class="fas fa-ticket-alt"></i><span>Coupons</span></a>
            <a href="#" class="nav-link mb-2"><i class="fas fa-image"></i><span>Banners</span></a>
            <a href="#" class="nav-link mb-2"><i class="fas fa-cog"></i><span>Settings</span></a>
            <a href="/admin/logout" class="nav-link text-danger mt-auto"><i class="fas fa-sign-out-alt"></i><span>Logout</span></a>
        </div>
    </nav>

    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <form id="productForm" method="POST" enctype="multipart/form-data">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Full Description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular Price</label>
                                        <input placeholder="$" name="regularPrice" type="text" class="form-control border" id="regularPrice">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Offer Percentage (%)</label>
                                        <input placeholder="%" name="productOffer" type="text" class="form-control border" id="productOffer">
                                        <div id="productOffer-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale Price</label>
                                        <input placeholder="$" name="salePrice" type="text" class="form-control border" id="salePrice" readonly>
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input placeholder="" name="quantity" type="text" class="form-control border" id="quantity">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control border" id="color">
                                        <div id="color-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select border" style="width: 150px;" name="category" id="categorySelect">
                                                <% for(let i = 0; i < cat.length; i++) { %>
                                                    <option value="<%= cat[i].name %>" data-offer="<%= cat[i].categoryOffer || 0 %>"><%= cat[i].name %></option>
                                                <% } %>
                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Choose Images</h4>
                                </div>
                                <div class="card-body">
                                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                                    <input class="form-control" type="file" id="imageInput" accept="image/png, image/jpeg, image/jpg" multiple>
                                    <div id="images-error" class="error-message"></div>
                                    <div id="cropperContainer" class="image-cropper">
                                        <div class="cropper-container">
                                            <img id="imageToCrop" src="" alt="Image to crop">
                                        </div>
                                        <button type="button" id="cropButton" class="btn">Crop & Add</button>
                                        <button type="button" id="cancelCrop" class="btn">Cancel</button>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <button class="btn btn-md rounded font-sm hover-up" type="submit">Publish</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        let cropper;
        const croppedImages = new Map();
        const imageInput = document.getElementById("imageInput");
        const cropperContainer = document.getElementById("cropperContainer");
        const imageToCrop = document.getElementById("imageToCrop");
        const cropButton = document.getElementById("cropButton");
        const cancelCrop = document.getElementById("cancelCrop");
        const addedImagesContainer = document.getElementById("addedImagesContainer");
        const productForm = document.getElementById("productForm");
        const regularPriceInput = document.getElementById("regularPrice");
        const productOfferInput = document.getElementById("productOffer");
        const salePriceInput = document.getElementById("salePrice");
        const categorySelect = document.getElementById("categorySelect");

        // Handle image selection
        imageInput.addEventListener("change", (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    imageToCrop.src = e.target.result;
                    cropperContainer.style.display = "block";

                    if (cropper) cropper.destroy();
                    cropper = new Cropper(imageToCrop, {
                        aspectRatio: 1,
                        viewMode: 1,
                        autoCropArea: 0.8,
                        responsive: true,
                        background: false,
                        zoomable: true,
                        guides: true,
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        // Crop and add image
        cropButton.addEventListener("click", () => {
            if (cropper) {
                const canvas = cropper.getCroppedCanvas({
                    width: 300,
                    height: 300,
                });

                canvas.toBlob(
                    (blob) => {
                        const fileName = `product-${Date.now()}.jpeg`;
                        const file = new File([blob], fileName, { type: "image/jpeg" });

                        croppedImages.set(fileName, file);
                        addThumbnail(file);

                        cropper.destroy();
                        cropperContainer.style.display = "none";
                        imageInput.value = "";
                    },
                    "image/jpeg",
                    0.95
                );
            }
        });

        // Cancel cropping
        cancelCrop.addEventListener("click", () => {
            if (cropper) cropper.destroy();
            cropperContainer.style.display = "none";
            imageInput.value = "";
        });

        // Add thumbnail preview
        function addThumbnail(file) {
            const thumbnail = document.createElement("div");
            thumbnail.classList.add("thumbnail");
            thumbnail.dataset.filename = file.name;

            const img = document.createElement("img");
            img.src = URL.createObjectURL(file);

            const removeIcon = document.createElement("span");
            removeIcon.classList.add("remove-icon");
            removeIcon.innerHTML = "×";
            removeIcon.onclick = () => {
                thumbnail.remove();
                croppedImages.delete(file.name);
            };

            thumbnail.appendChild(img);
            thumbnail.appendChild(removeIcon);
            addedImagesContainer.appendChild(thumbnail);
        }

        // Calculate sale price
        function calculateSalePrice() {
            const regularPrice = parseFloat(regularPriceInput.value) || 0;
            const productOffer = parseFloat(productOfferInput.value) || 0;
            const selectedOption = categorySelect.options[categorySelect.selectedIndex];
            const categoryOffer = parseFloat(selectedOption.dataset.offer) || 0;
            const effectiveOffer = Math.max(productOffer, categoryOffer);
            const salePrice = regularPrice * (1 - effectiveOffer / 100);
            salePriceInput.value = salePrice > 0 ? salePrice.toFixed(2) : "";
        }

        // Event listeners for price calculation
        regularPriceInput.addEventListener("input", calculateSalePrice);
        productOfferInput.addEventListener("input", calculateSalePrice);
        categorySelect.addEventListener("change", calculateSalePrice);

        // Form validation
        function validateForm() {
            clearErrorMessages();
            const name = document.getElementById("product_name").value;
            const description = document.getElementById("descriptionid").value;
            const regularPrice = regularPriceInput.value;
            const productOffer = productOfferInput.value;
            const quantity = document.getElementById("quantity").value;
            const color = document.getElementById("color").value;
            const category = categorySelect.value;
            let isValid = true;

            if (name.trim() === "") {
                displayErrorMessage("productName-error", "Please enter a product name.");
                isValid = false;
            }

            if (description.trim() === "") {
                displayErrorMessage("description-error", "Please enter a product description.");
                isValid = false;
            }

            if (!/^\d+(\.\d{1,2})?$/.test(regularPrice) || parseFloat(regularPrice) <= 0) {
                displayErrorMessage("regularPrice-error", "Please enter a valid positive price (e.g., 99.99).");
                isValid = false;
            }

            if (productOffer && (!/^\d+(\.\d{1,2})?$/.test(productOffer) || parseFloat(productOffer) < 0 || parseFloat(productOffer) > 100)) {
                displayErrorMessage("productOffer-error", "Offer must be a number between 0 and 100 (e.g., 10.00).");
                isValid = false;
            }

            if (!/^\d+$/.test(quantity) || parseInt(quantity) < 0) {
                displayErrorMessage("quantity-error", "Please enter a valid non-negative integer for quantity.");
                isValid = false;
            }

            if (color.trim() === "") {
                displayErrorMessage("color-error", "Please enter a color.");
                isValid = false;
            }

            if (category.trim() === "") {
                displayErrorMessage("category-error", "Please select a category.");
                isValid = false;
            }

            if (croppedImages.size < 3) {
                displayErrorMessage("images-error", "Please upload and crop at least 3 images.");
                isValid = false;
            }

            return isValid;
        }

        function displayErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }

        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName("error-message");
            Array.from(errorElements).forEach((element) => {
                element.innerText = "";
                element.style.display = "none";
            });
        }

        productForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            if (validateForm()) {
                const formData = new FormData(productForm);

                croppedImages.forEach((file, fileName) => {
                    formData.append("images", file, fileName);
                });

                try {
                    const response = await fetch("/admin/addProducts", {
                        method: "POST",
                        body: formData,
                        csrfToken: document.querySelector('meta[name="csrf-token"]').content,
                        headers: {
                            "CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
                        },
                    });

                    const data = await response.json();

                    if (response.ok) {
                        await Swal.fire({
                            icon: "success",
                            title: "Success!",
                            text: "Product added successfully",
                            showConfirmButton: true,
                            confirmButtonColor: "#3085d6",
                            timer: 2000,
                        });
                        window.location.href = "/admin/products";
                    } else {
                        await Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: data.message || "Error adding product",
                            confirmButtonColor: "#d33",
                        });
                    }
                } catch (error) {
                    console.error("Submission error:", error);
                    await Swal.fire({
                        icon: "error",
                        title: "Server Error",
                        text: "An unexpected error occurred",
                        confirmButtonColor: "#d33",
                    });
                }
            }
        });
    </script>
</body>
</html>