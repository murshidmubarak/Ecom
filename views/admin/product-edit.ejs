<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        :root {
            --sidebar-width: 250px;
            --sidebar-collapsed-width: 70px;
            --header-height: 60px;
            --primary-color: #cbcfda;
            --secondary-color: #858796;
            --dark-bg: #1a1a1a;
            --card-bg: #242424;
            --text-color: #e4e4e4;
            --fluorescent-green: #2b08ee;
            --gradient-green: linear-gradient(135deg, #b0aec8, rgb(120, 100, 100));
        }
        body {
            background-color: var(--dark-bg);
            color: var(--text-color);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin-left: var(--sidebar-width);
        }
        .sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: var(--sidebar-width);
            background: linear-gradient(180deg, #010612 0%, #224abe 100%);
            transition: all 0.3s ease;
            z-index: 1000;
            padding-top: var(--header-height);
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.5);
        }
        .sidebar.collapsed {
            width: var(--sidebar-collapsed-width);
        }
        .sidebar-header {
            position: fixed;
            top: 0;
            left: 0;
            width: var(--sidebar-width);
            height: var(--header-height);
            background: rgba(1, 6, 18, 0.9);
            display: flex;
            align-items: center;
            padding: 0 1rem;
            transition: all 0.3s ease;
            z-index: 1001;
        }
        .sidebar.collapsed .sidebar-header {
            width: var(--sidebar-collapsed-width);
        }
        .logo-full {
            display: flex;
            align-items: center;
            color: white;
            text-decoration: none;
            font-size: 1.5rem;
            font-weight: bold;
        }
        .logo-mini {
            display: none;
            color: white;
            text-decoration: none;
            font-size: 1.5rem;
            font-weight: bold;
        }
        .sidebar.collapsed .logo-full {
            display: none;
        }
        .sidebar.collapsed .logo-mini {
            display: block;
        }
        .nav-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            border-radius: 0.5rem;
            transition: all 0.3s ease;
        }
        .nav-link:hover {
            color: white;
            background: var(--gradient-green);
        }
        .nav-link i {
            width: 20px;
            text-align: center;
            margin-right: 1rem;
        }
        .sidebar.collapsed .nav-link span {
            display: none;
        }
        .sidebar.collapsed .nav-link i {
            margin-right: 0;
        }
        .content-main {
            padding: 2rem;
        }
        .card {
            background-color: var(--card-bg);
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
        }
        .form-control {
            width: 100%;
            padding: 0.5rem;
            margin-bottom: 1rem;
            border-radius: 0.25rem;
            border: 1px solid var(--secondary-color);
            background-color: var(--dark-bg);
            color: var(--text-color);
        }
        .btn {
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            border: none;
            background-color: var(--fluorescent-green);
            color: white;
            cursor: pointer;
        }
        .btn:hover {
            background-color: #1a0699;
        }
        .error-message {
            color: red;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }
        .thumbnails-container {
            display: flex;
            overflow-x: auto;
            padding: 10px 0;
            gap: 10px;
        }
        .thumbnail {
            position: relative;
            flex: 0 0 auto;
        }
        .thumbnail img {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 4px;
        }
        .remove-icon {
            position: absolute;
            top: -5px;
            right: -5px;
            background: red;
            color: white;
            width: 15px;
            height: 15px;
            border-radius: 50%;
            text-align: center;
            cursor: pointer;
            font-size: 12px;
            line-height: 15px;
        }
        .image-cropper {
            margin: 10px 0;
            max-width: 400px;
            display: none;
        }
        .cropper-container {
            margin-bottom: 10px;
        }
        .existing-images {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 15px;
        }
        .existing-image {
            position: relative;
            width: 100px;
            height: 100px;
        }
        .existing-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 4px;
        }
        .delete-icon {
            position: absolute;
            top: -5px;
            right: -5px;
            background: red;
            color: white;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            text-align: center;
            cursor: pointer;
            font-size: 14px;
            line-height: 20px;
        }
    </style>
</head>
<body>
    <nav class="sidebar">
        <div class="sidebar-header">
            <a href="#" class="logo-full">
                <i class="fas fa-shopping-bag me-2"></i>
                VGURIE
            </a>
            <a href="#" class="logo-mini">
                <i class="fas fa-shopping-bag"></i>
            </a>
        </div>
        <div class="nav flex-column p-3">
            <a href="/admin/dashboard" class="nav-link mb-2"><i class="fas fa-th-large"></i><span>Dashboard</span></a>
            <a href="/admin/addProducts" class="nav-link mb-2"><i class="fas fa-box"></i><span>Products</span></a>
            <a href="/admin/ordermanagement" class="nav-link mb-2"><i class="fas fa-shopping-cart"></i><span>Orders</span></a>
            <a href="/admin/users" class="nav-link mb-2"><i class="fas fa-users"></i><span>Users</span></a>
            <a href="/admin/categories" class="nav-link mb-2"><i class="fas fa-tags"></i><span>Categories</span></a>
            <a href="/admin/returnRequests" class="nav-link mb-2"><i class="fas fa-undo-alt"></i><span>Returns & Refunds</span></a>
            <a href="/admin/coupons" class="nav-link mb-2"><i class="fas fa-ticket-alt"></i><span>Coupons</span></a>
            <a href="#" class="nav-link mb-2"><i class="fas fa-image"></i><span>Banners</span></a>
            <a href="#" class="nav-link mb-2"><i class="fas fa-cog"></i><span>Settings</span></a>
            <a href="/admin/logout" class="nav-link text-danger mt-auto"><i class="fas fa-sign-out-alt"></i><span>Logout</span></a>
        </div>
    </nav>

    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Edit Product</h2>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <form id="editProductForm" method="POST" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name" value="<%= product.productName %>">
                                <div id="productName-error" class="error-message"></div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"><%= product.description %></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" name="regularPrice" type="text" class="form-control border" value="<%= product.regularPrice %>">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input placeholder="$" name="salePrice" type="text" class="form-control border" value="<%= product.salePrice %>">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input placeholder="" name="quantity" type="text" class="form-control border" value="<%= product.quantity %>">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Size</label>
                                        <input name="size" type="text" class="form-control border" value="<%= product.size %>">
                                        <div id="size-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control border" value="<%= product.color %>">
                                        <div id="color-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select border" style="width: 150px;"   name="category">
                                                <% for(let i = 0; i < cat.length; i++) { %>
                                                    <option value="<%= cat[i]._id %>" <%= (product.category && product.category._id.toString() === cat[i]._id.toString()) ? 'selected' : '' %>>
                                                        <%= cat[i].name %>
                                                    </option>
                                                    <%}%>
                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Current Images</h4>
                                </div>
                                <div class="card-body">
                                    <div class="existing-images">
                                        <% if(product.productImage && product.productImage.length > 0) { %>
                                            <% product.productImage.forEach(function(image) { %>
                                                <div class="existing-image" data-image="<%= image %>">
                                                    <img src="/uploads/<%= image %>" alt="Product image">
                                                    <span class="delete-icon">×</span>
                                                </div>
                                            <% }); %>
                                        <% } else { %>
                                            <p>No images available</p>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Add New Images</h4>
                                </div>
                                <div class="card-body">
                                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                                    <input class="form-control" type="file" id="imageInput" accept="image/png, image/jpeg, image/jpg" multiple>
                                    <div id="images-error" class="error-message"></div>
                                    <div id="cropperContainer" class="image-cropper">
                                        <div class="cropper-container">
                                            <img id="imageToCrop" src="" alt="Image to crop">
                                        </div>
                                        <button type="button" id="cropButton" class="btn">Crop & Add</button>
                                        <button type="button" id="cancelCrop" class="btn">Cancel</button>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <button class="btn btn-md rounded font-sm hover-up" type="submit">Update Product</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        let cropper;
        const croppedImages = new Map();
        const imageInput = document.getElementById('imageInput');
        const cropperContainer = document.getElementById('cropperContainer');
        const imageToCrop = document.getElementById('imageToCrop');
        const cropButton = document.getElementById('cropButton');
        const cancelCrop = document.getElementById('cancelCrop');
        const addedImagesContainer = document.getElementById('addedImagesContainer');
        const editProductForm = document.getElementById('editProductForm');
        const productId = '<%= product._id %>';

        // Handle image selection
        imageInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const existingImages = document.querySelectorAll('.existing-image').length;
                const newImages = document.querySelectorAll('.thumbnail').length;
                const totalImages = existingImages + newImages;

                if (totalImages >= 4) {
                    document.getElementById('images-error').innerText = 'Error: Maximum of 4 images allowed.';
                    document.getElementById('images-error').style.display = 'block';
                    imageInput.value = ''; // Clear the input
                    return;
                }

                const reader = new FileReader();
                reader.onload = (e) => {
                    imageToCrop.src = e.target.result;
                    cropperContainer.style.display = 'block';

                    if (cropper) cropper.destroy();
                    cropper = new Cropper(imageToCrop, {
                        aspectRatio: 1,
                        viewMode: 1,
                        autoCropArea: 0.8,
                        responsive: true,
                        background: false,
                        zoomable: true,
                        guides: true,
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        // Crop and add image
        cropButton.addEventListener('click', () => {
            if (cropper) {
                const canvas = cropper.getCroppedCanvas({
                    width: 300,
                    height: 300,
                });

                canvas.toBlob((blob) => {
                    const fileName = `product-${Date.now()}.jpeg`;
                    const file = new File([blob], fileName, { type: 'image/jpeg' });

                    // Store the cropped image data
                    const index = croppedImages.size;
                    const dataUrl = canvas.toDataURL('image/jpeg');

                    // Add to form as hidden input
                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = `images`;
                    hiddenInput.value = dataUrl;
                    editProductForm.appendChild(hiddenInput);

                    // Add to preview
                    addThumbnail(file, fileName);

                    cropper.destroy();
                    cropperContainer.style.display = 'none';
                    imageInput.value = '';
                }, 'image/jpeg', 0.95);
            }
        });

        // Cancel cropping
        cancelCrop.addEventListener('click', () => {
            if (cropper) cropper.destroy();
            cropperContainer.style.display = 'none';
            imageInput.value = '';
        });

        // Add thumbnail preview with maximum limit check
        function addThumbnail(file, fileName) {
            const existingImages = document.querySelectorAll('.existing-image').length;
            const newImages = document.querySelectorAll('.thumbnail').length;

            if (existingImages + newImages >= 4) {
                document.getElementById('images-error').innerText = 'Error: Maximum of 4 images allowed.';
                document.getElementById('images-error').style.display = 'block';
                return;
            }

            const thumbnail = document.createElement('div');
            thumbnail.classList.add('thumbnail');
            thumbnail.dataset.filename = fileName;

            const img = document.createElement('img');
            img.src = URL.createObjectURL(file);

            const removeIcon = document.createElement('span');
            removeIcon.classList.add('remove-icon');
            removeIcon.innerHTML = '×';
            removeIcon.onclick = () => {
                thumbnail.remove();
                const hiddenInput = document.querySelector(`input[name="cropped-image-${fileName}"]`);
                if (hiddenInput) hiddenInput.remove();
                validateImageCount();
            };

            thumbnail.appendChild(img);
            thumbnail.appendChild(removeIcon);
            addedImagesContainer.appendChild(thumbnail);

            validateImageCount();
        }

        /* // Delete existing image with validation
        document.querySelectorAll('.delete-icon').forEach(icon => {
            icon.addEventListener('click', async function() {
                const imageContainer = this.parentElement;
                const imageName = imageContainer.dataset.image;

                if (confirm('Are you sure you want to delete this image?')) {
                    try {
                        const response = await fetch('/admin/deleteImage', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                imageNameToServer: imageName,
                                ProductIdToServer: productId
                            })
                        });

                        const result = await response.json();
                        if (result.status) {
                            imageContainer.remove();
                            alert('Image deleted successfully');
                            validateImageCount();
                        } else {
                            alert('Failed to delete image: ' + result.message);
                        }
                    } catch (error) {
                        console.error('Error deleting image:', error);
                        alert('An error occurred while deleting the image');
                    }
                }
            });
        }); */

        document.querySelectorAll('.delete-icon').forEach(icon => {
    icon.addEventListener('click', async function() {
        const imageContainer = this.parentElement;
        const imageName = imageContainer.dataset.image;

        // Show confirmation dialog
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: 'Do you want to delete this image?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        });

        if (result.isConfirmed) {
            try {
                const response = await fetch('/admin/deleteImage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        imageNameToServer: imageName,
                        ProductIdToServer: productId
                    })
                });

                const result = await response.json();
                if (result.status) {
                    imageContainer.remove();
                    // Success alert
                    Swal.fire({
                        icon: 'success',
                        title: 'Deleted!',
                        text: 'Image has been deleted successfully',
                        showConfirmButton: false,
                        timer: 1500
                    });
                    validateImageCount();
                } else {
                    // Error alert
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to delete image: ' + result.message,
                        confirmButtonText: 'OK'
                    });
                }
            } catch (error) {
                console.error('Error deleting image:', error);
                // Error alert
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while deleting the image',
                    confirmButtonText: 'OK'
                });
            }
        }
    });
});

        // Validate image count
        function validateImageCount() {
            const existingImages = document.querySelectorAll('.existing-image').length;
            const newImages = document.querySelectorAll('.thumbnail').length;
            const totalImages = existingImages + newImages;
            const imagesError = document.getElementById('images-error');

            // Clear previous error message
            imagesError.innerText = '';
            imagesError.style.display = 'none';

            // Check if less than 3 images
            if (totalImages < 3) {
                imagesError.innerText = 'Error: Minimum of 3 images required.';
                imagesError.style.display = 'block';
                return false;
            }

            // Check if more than 4 images
            if (totalImages > 4) {
                imagesError.innerText = 'Error: Maximum of 4 images allowed.';
                imagesError.style.display = 'block';
                return false;
            }

            return true;
        }

        // Form validation
        function validateForm() {
            clearErrorMessages();
            const name = document.getElementsByName('productName')[0].value;
            const description = document.getElementById('descriptionid').value;
            const price = document.getElementsByName('regularPrice')[0].value;
            const saleprice = document.getElementsByName('salePrice')[0].value;
            const quantity = document.getElementsByName('quantity')[0].value;
            const color = document.getElementsByName('color')[0].value;
            let isValid = true;

            if (name.trim() === "") {
                displayErrorMessage('productName-error', 'Please enter a product name.');
                isValid = false;
            } else if (!/^[a-zA-Z0-9\s]+$/.test(name.trim())) {
                displayErrorMessage('productName-error', 'Product name should contain only alphanumeric characters.');
                isValid = false;
            }

            if (description.trim() === "") {
                displayErrorMessage('description-error', 'Please enter a product description.');
                isValid = false;
            }

            if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
                displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                isValid = false;
            }

            if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
                displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                isValid = false;
            }

            if (parseFloat(price) <= parseFloat(saleprice)) {
                displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
                isValid = false;
            }

            if (!/^\d+$/.test(quantity) || parseInt(quantity) < 0) {
                displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                isValid = false;
            }

            if (color.trim() === "") {
                displayErrorMessage('color-error', 'Please enter a color.');
                isValid = false;
            }

            return isValid;
        }

        function displayErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.innerText = message;
            errorElement.style.display = 'block';
        }

        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName('error-message');
            Array.from(errorElements).forEach(element => {
                element.innerText = '';
                element.style.display = 'none';
            });
        }

        // Handle form submission
       /*  editProductForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            // Validate form fields and image count
            const isFormValid = validateForm();
            const isImageCountValid = validateImageCount();

            if (isFormValid && isImageCountValid) {
                const formData = new FormData(editProductForm);

                try {
                    const response = await fetch(editProductForm.action, {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        window.location.href = '/admin/products';
                    } else {
                        const errorText = await response.text();
                        alert('Error updating product: ' + errorText);
                    }
                } catch (error) {
                    console.error('Submission error:', error);
                    alert('Server error occurred: ' + error.message);
                }
            } else {
                // Provide feedback if submission is blocked
                if (!isImageCountValid) {
                    alert('Cannot update product: Image count must be between 3 and 4.');
                }
            }
        }); */

        editProductForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Validate form fields and image count
    const isFormValid = validateForm();
    const isImageCountValid = validateImageCount();

    if (isFormValid && isImageCountValid) {
        const formData = new FormData(editProductForm);

        try {
            // Show loading alert
            Swal.fire({
                title: 'Updating Product',
                text: 'Please wait...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await fetch(editProductForm.action, {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                // Success alert
                await Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Product updated successfully',
                    showConfirmButton: false,
                    timer: 1500
                });
                window.location.href = '/admin/products';
            } else {
                const errorText = await response.text();
                // Error alert
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error updating product: ' + errorText,
                    confirmButtonText: 'OK'
                });
            }
        } catch (error) {
            console.error('Submission error:', error);
            // Error alert for server issues
            await Swal.fire({
                icon: 'error',
                title: 'Server Error',
                text: 'Server error occurred: ' + error.message,
                confirmButtonText: 'OK'
            });
        }
    } else {
        // Validation failure alert
        let errorMessage = '';
        if (!isFormValid) {
            errorMessage = 'Please fill all fields correctly';
        } else if (!isImageCountValid) {
            errorMessage = 'Image count must be between 3 and 4';
        }

        Swal.fire({
            icon: 'warning',
            title: 'Validation Error',
            text: errorMessage,
            confirmButtonText: 'OK'
        });
    }
});

        // Toggle sidebar and initial validation
        document.addEventListener('DOMContentLoaded', function() {
            const sidebarToggle = document.createElement('button');
            sidebarToggle.innerHTML = '<i class="fas fa-bars"></i>';
            sidebarToggle.classList.add('btn');
            sidebarToggle.style.position = 'fixed';
            sidebarToggle.style.top = '10px';
            sidebarToggle.style.left = '10px';
            sidebarToggle.style.zIndex = '1002';

            document.body.appendChild(sidebarToggle);

            sidebarToggle.addEventListener('click', function() {
                const sidebar = document.querySelector('.sidebar');
                sidebar.classList.toggle('collapsed');

                if (sidebar.classList.contains('collapsed')) {
                    document.body.style.marginLeft = 'var(--sidebar-collapsed-width)';
                } else {
                    document.body.style.marginLeft = 'var(--sidebar-width)';
                }
            });

            
            validateImageCount();
        });
    </script>
</body>
</html>