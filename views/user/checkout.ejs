
<%- include("../../views/partials/user/header") %>

<!DOCTYPE html>
<html lang="zxx">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout | Male-Fashion</title>

    <!-- Google Font -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">

    <!-- CSS Styles -->
    <link rel="stylesheet" href="/css/bootstrap.min.css" type="text/css">
    <link rel="stylesheet" href="/css/font-awesome.min.css" type="text/css">
    <link rel="stylesheet" href="/css/elegant-icons.css" type="text/css">
    <link rel="stylesheet" href="/css/magnific-popup.css" type="text/css">
    <link rel="stylesheet" href="/css/nice-select.css" type="text/css">
    <link rel="stylesheet" href="/css/owl.carousel.min.css" type="text/css">
    <link rel="stylesheet" href="/css/slicknav.min.css" type="text/css">
    <link rel="stylesheet" href="/css/style.css" type="text/css">

    <!-- SweetAlert2 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

    <!-- Razorpay Checkout Script -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <meta name="csrf-token" content="<%= csrfToken %>">

    <style>
        body {
            padding-top: 120px;
            font-family: 'Nunito Sans', sans-serif;
            background-color: #f5f5f5;
        }
        .checkout-container {
            padding: 40px 0;
        }
        .card {
            border: none;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            border-radius: 10px;
            background: #fff;
            transition: transform 0.3s ease;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .order-table th, .order-table td {
            vertical-align: middle;
            padding: 15px;
            border-bottom: 1px solid #e9ecef;
        }
        .order-table img {
            max-width: 80px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
        .address-card {
            padding: 20px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            transition: all 0.3s ease;
            background: #fafafa;
        }
        .address-card:hover {
            border-color: #111111;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
        }
        .payment-method, .order-summary {
            padding: 25px;
            border-radius: 10px;
            background: #fff;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        }
        .btn-primary {
            background-color: #111111;
            border: none;
            padding: 12px 20px;
            font-weight: 600;
            color: #fff;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }
        .btn-primary:hover {
            background-color: #333333;
        }
        .btn-outline-primary {
            border-color: #111111;
            color: #111111;
            padding: 8px 15px;
            border-radius: 5px;
        }
        .btn-outline-primary:hover {
            background-color: #111111;
            color: #fff;
        }
        .btn-danger {
            background-color: #e74c3c;
            padding: 8px 15px;
            border-radius: 5px;
        }
        .btn-danger:hover {
            background-color: #c0392b;
        }
        h4, h5 {
            font-weight: 700;
            color: #111111;
            margin-bottom: 20px;
            position: relative;
        }
        h4::after, h5::after {
            content: '';
            width: 50px;
            height: 3px;
            background: #111111;
            position: absolute;
            bottom: -5px;
            left: 0;
        }
        .section-gap {
            margin-top: 50px;
        }
        .coupon-section {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .coupon-section input {
            flex: 1;
            padding: 8px;
            border: 1px solid #e9ecef;
            border-radius: 5px;
            font-size: 0.9rem;
        }
        .coupon-section button {
            padding: 8px 15px;
            font-size: 0.9rem;
        }
        .coupon-applied {
            color: #28a745;
            font-weight: 600;
            margin-bottom: 10px;
        }
        .debug-coupons {
            margin-top: 40px;
            padding: 20px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        }
        .debug-coupons h5 {
            font-weight: 700;
            color: #111111;
            margin-bottom: 20px;
        }
        .debug-coupons ul {
            list-style: none;
            padding: 0;
        }
        .debug-coupons li {
            padding: 10px 0;
            border-bottom: 1px solid #e9ecef;
        }
        .debug-coupons .no-coupons {
            color: #e74c3c;
            font-weight: 600;
        }
        .swal2-custom-popup {
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        .swal2-custom-title {
            font-size: 1.5rem;
            color: #111111;
        }
        .swal2-custom-content {
            font-size: 1rem;
            color: #333;
        }
        #codMessage {
            font-size: 0.85rem;
            margin-top: 5px;
            display: block;
        }
        @media (max-width: 768px) {
            body {
                padding-top: 100px;
            }
            .checkout-container {
                padding: 20px 0;
            }
            .section-gap {
                margin-top: 30px;
            }
            .card:hover {
                transform: none;
            }
            .coupon-section {
                flex-direction: column;
            }
            .coupon-section button {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <!-- Checkout Section -->
    <section class="checkout-container">
        <div class="container">
            <div class="row g-4">
                <!-- Products Section -->
                <div class="col-lg-12">
                    <div class="card p-4">
                        <h4>Your Cart</h4>
                        <div class="table-responsive">
                            <table class="table order-table text-center">
                                <thead>
                                    <tr>
                                        <th>Image</th>
                                        <th>Product</th>
                                        <th>Quantity</th>
                                        <th>Total</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% if (product && product.length > 0) { %>
                                        <% product.forEach(item => { %>
                                            <% if (item.productDetails) { %>
                                                <tr>
                                                    <td>
                                                        <img src="/uploads/<%= item.productDetails.productImage[0] || 'default.jpg' %>" 
                                                             alt="<%= item.productDetails.productName || 'Product' %>">
                                                    </td>
                                                    <td>
                                                        <h6>
                                                            <a href="/product/<%= item.productDetails._id %>">
                                                                <%= item.productDetails.productName || 'Unknown Product' %>
                                                            </a>
                                                        </h6>
                                                    </td>
                                                    <td><%= item.cart.quantity || 0 %></td>
                                                    <td>â‚¹<%= ((item.productDetails.salePrice || 0) * (item.cart.quantity || 0)).toFixed(2) %></td>
                                                    <td>
                                                        <button class="btn btn-sm btn-danger" 
                                                                onclick="confirmRemove('<%= item.productDetails._id %>')">
                                                            <i class="fa fa-trash"></i> Remove
                                                        </button>
                                                    </td>
                                                </tr>
                                            <% } %>
                                        <% }) %>
                                    <% } else { %>
                                        <tr>
                                            <td colspan="5">No products in cart</td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Address Section -->
                <div class="col-lg-8 section-gap">
                    <div class="card p-4">
                        <h4>Delivery Address</h4>
                        <div class="row g-3">
                            <% if (userAddress && userAddress.address && userAddress.address.length > 0) { %>
                                <% userAddress.address.forEach(address => { %>
                                    <div class="col-md-6">
                                        <div class="address-card">
                                            <div class="form-check">
                                                <input class="form-check-input" type="radio" 
                                                       id="addressRadio<%= address._id %>" 
                                                       name="selectedAddress" 
                                                       value="<%= address._id %>">
                                                <label class="form-check-label" for="addressRadio<%= address._id %>">
                                                    <strong><%= address.addressType || 'Address' %></strong>
                                                </label>
                                            </div>
                                            <address class="mt-2">
                                                <%= address.name || 'N/A' %><br>
                                                <%= address.city || '' %>, <%= address.state || '' %><br>
                                                <%= address.landMark || '' %><br>
                                                PIN: <%= address.pincode || 'N/A' %>
                                            </address>
                                            <p>Phone: <%= address.phone || 'N/A' %></p>
                                            <% if (address.altPhone) { %>
                                                <p>Alt: <%= address.altPhone %></p>
                                            <% } %>
                                            <div class="d-flex gap-2">
                                              <a href="/editAddress?id=<%= address._id %>&redirect=checkout" class="btn btn-sm btn-outline-primary">Edit</a>
                                             </div>

                                        </div>
                                    </div>
                                <% }) %>
                            <% } else { %>
                                <div class="col-12">
                                    <p>No addresses found</p>
                                </div>
                            <% } %>
                           <div class="col-md-6">
                            <a href="/addAddress?redirect=checkout" class="btn btn-primary w-100">Add New Address</a>
                          </div>

                        </div>
                    </div>
                </div>

                <!-- Payment & Summary Section -->
                <div class="col-lg-4 section-gap">
                    <div class="payment-method mb-4">
                        <h5>Payment Method</h5>
                        <div class="form-check">
                            <input class="form-check-input payment" 
                                   type="radio" 
                                   value="cod" 
                                   name="payment_option" 
                                   id="CashOnDelivery"
                                   <%= grandTotal > 1000 ? 'disabled' : 'checked' %>>
                            <label class="form-check-label" for="CashOnDelivery">
                                Cash on Delivery
                            </label>
                            <small id="codMessage" class="form-text text-danger" style="<%= grandTotal <= 1000 ? 'display: none;' : '' %>">
                                No Cash on Delivery for orders above â‚¹1000
                            </small>
                        </div>
                        <div class="form-check mt-2">
                            <input class="form-check-input payment" 
                                   type="radio" 
                                   value="razorpay" 
                                   name="payment_option" 
                                   id="Razorpay"
                                   <%= grandTotal > 1000 ? 'checked' : '' %>>
                            <label class="form-check-label" for="Razorpay">
                                Online Payment (Razorpay)
                            </label>
                        </div>
                        <div class="form-check mt-2">
                            <input class="form-check-input payment" 
                                   type="radio" 
                                   value="wallet" 
                                   name="payment_option" 
                                   id="Wallet">
                            <label class="form-check-label" for="Wallet">
                                Wallet Payment (Balance: â‚¹<%= walletBalance ? walletBalance : '0.00' %>)
                            </label>
                        </div>
                    </div>
                    <div class="order-summary">
                        <h5>Order Summary</h5>
                        <form id="couponForm">
                            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                            <div class="coupon-section">
                                <input type="text" id="couponCode" name="couponCode" class="form-control" placeholder="Enter coupon code">
                                <button type="submit" class="btn btn-outline-primary" id="applyCouponBtn">Apply</button>
                            </div>
                        </form>
                        <div id="couponMessage" class="coupon-applied" style="display: none;"></div>
                        <table class="table">
                            <tbody>
                                <tr>
                                    <th>Subtotal</th>
                                    <td>â‚¹<%= typeof grandTotal === 'number' ? grandTotal.toFixed(2) : '0.00' %></td>
                                </tr>
                                <tr id="couponDiscountRow" style="display: none;">
                                    <th>Coupon Discount</th>
                                    <td id="couponDiscount">â‚¹0.00</td>
                                </tr>
                                <tr>
                                    <th>Shipping</th>
                                    <td>Free Shipping</td>
                                </tr>
                                <tr>
                                    <th>Total</th>
                                    <td>
                                        <span class="fw-bold" id="totalValue">
                                            â‚¹<%= typeof grandTotal === 'number' ? grandTotal.toFixed(2) : '0.00' %>
                                        </span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-primary w-100" 
                                onclick="placeOrder('<%= user._id %>')">
                            Place Order
                        </button>
                    </div>
                </div>

                <!-- Debug Section for Available Coupons -->
                <div class="col-lg-12 section-gap">
                    <div class="debug-coupons">
                        <h5>Available Coupons</h5>
                        <% if (coupons && coupons.length > 0) { %>
                            <ul>
                                <% coupons.forEach(coupon => { %>
                                    <li>
                                        <%= coupon.couponName %>: â‚¹<%= coupon.offerPrice %> off (Min. â‚¹<%= coupon.minimumPrice %>)
                                        <br>
                                        Status: <%= coupon.status %>, Active: <%= coupon.isActive ? 'Yes' : 'No' %>, 
                                        Start: <%= coupon.startDate.toISOString().split('T')[0] %>, 
                                        End: <%= coupon.endDate.toISOString().split('T')[0] %>
                                    </li>
                                <% }) %>
                            </ul>
                        <% } else { %>
                            <p class="no-coupons">No coupons available</p>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
    <script>
        // Fallback for jQuery if CDN fails
        if (typeof jQuery === 'undefined') {
            document.write('<script src="/js/jquery-3.3.1.min.js"><\/script>');
        }
    </script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="/js/jquery.nice-select.min.js"></script>
    <script src="/js/jquery.nicescroll.min.js"></script>
    <script src="/js/jquery.magnific-popup.min.js"></script>
    <script src="/js/jquery.countdown.min.js"></script>
    <script src="/js/jquery.slicknav.js"></script>
    <script src="/js/mixitup.min.js"></script>
    <script src="/js/owl.carousel.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <script src="/js/main.js"></script>

    <script>
        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

        // Setup CSRF token for all jQuery AJAX requests
        $.ajaxSetup({
            beforeSend: function(xhr, settings) {
                if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {
                    xhr.setRequestHeader("X-CSRF-Token", csrfToken);
                }
            }
        });

        

        let appliedCoupon = null;

        // Ensure DOM is fully loaded before binding events
        document.addEventListener('DOMContentLoaded', function() {

            // Verify button exists
            const applyButton = document.getElementById('applyCouponBtn');
            if (!applyButton) {
                return;
            }

            // Handle coupon form submission
            const couponForm = document.getElementById('couponForm');
            if (couponForm) {
                couponForm.addEventListener('submit', function(event) {
                    event.preventDefault();
                    console.log('Coupon form submitted at:', new Date().toISOString());
                    applyCoupon();
                });
            } else {
                console.error('Coupon form (#couponForm) not found in DOM');
            }

            // Verify input element exists
            const couponInput = document.getElementById('couponCode');
            

            // Handle error message on page load
            <% if (errorMessage) { %>
                Swal.fire({
                    title: 'Error',
                    text: '<%= errorMessage %>',
                    icon: 'error',
                    confirmButtonText: 'Go to Cart',
                    allowOutsideClick: false,
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        popup: 'swal2-custom-popup',
                        title: 'swal2-custom-title',
                        content: 'swal2-custom-content'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/cart';
                    }
                });
            <% } %>
        });

        function confirmRemove(productId) {
        Swal.fire({
            title: 'Remove Item?',
            text: "Are you sure you want to remove this item from your cart?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = `/deleteProduct?id=${productId}`;
            }
        });
    }
        function confirmDeleteAddress(addressId) {
            Swal.fire({
                title: 'Delete Address?',
                text: "Are you sure you want to delete this address?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Create a form to send CSRF token with the request
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = `/deleteAddress`;
                    form.style.display = 'none';

                    const csrfInput = document.createElement('input');
                    csrfInput.type = 'hidden';
                    csrfInput.name = '_csrf';
                    csrfInput.value = csrfToken;

                    const addressIdInput = document.createElement('input');
                    addressIdInput.type = 'hidden';
                    addressIdInput.name = 'id';
                    addressIdInput.value = addressId;

                    form.appendChild(csrfInput);
                    form.appendChild(addressIdInput);
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        }

        async function applyCoupon() {
            console.log('applyCoupon: Function called');

            if (!csrfToken) {
                Swal.fire({
                    title: "Error",
                    text: "CSRF token is missing. Please refresh the page and try again.",
                    icon: "error",
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        popup: 'swal2-custom-popup',
                        title: 'swal2-custom-title',
                        content: 'swal2-custom-content'
                    }
                });
                return;
            }

            // Verify jQuery availability
            if (typeof jQuery === 'undefined') {
                alert('jQuery is not loaded. Please check the console for errors.');
                return;
            }

            // Verify SweetAlert2 availability
            if (typeof Swal === 'undefined') {
                alert('SweetAlert2 is not loaded. Please check the console for errors.');
                return;
            }

            const couponCode = $("#couponCode").val()?.trim();

            if (!couponCode) {
                console.log('applyCoupon: No coupon entered');
                Swal.fire({
                    title: "Error",
                    text: "Please enter a coupon code",
                    icon: "error",
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        popup: 'swal2-custom-popup',
                        title: 'swal2-custom-title',
                        content: 'swal2-custom-content'
                    }
                });
                return;
            }

            try {
                const totalPrice = <%= typeof grandTotal === 'number' ? grandTotal : 0 %>;

                const response = await $.ajax({
                    url: "/applyCoupon",
                    method: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({
                        couponCode: couponCode,
                        totalPrice: totalPrice,
                        _csrf: csrfToken
                    })
                });


                if (response.success) {
                    appliedCoupon = {
                        discount: response.discount,
                        couponName: response.couponName,
                    };
                    const newTotal = totalPrice - response.discount;
                    $("#couponMessage")
                        .text(`Coupon "${response.couponName}" applied! â‚¹${response.discount.toFixed(2)} off`)
                        .show();
                    $("#couponDiscount").text(`-â‚¹${response.discount.toFixed(2)}`);
                    $("#couponDiscountRow").show();
                    $("#totalValue").text(`â‚¹${newTotal.toFixed(2)}`);

                    // Update COD availability based on new total
                    if (newTotal > 1000) {
                        $("#CashOnDelivery").prop("disabled", true);
                        $("#codMessage").show();
                        if ($("#CashOnDelivery").is(":checked")) {
                            $("#Razorpay").prop("checked", true);
                        }
                    } else {
                        $("#CashOnDelivery").prop("disabled", false);
                        $("#codMessage").hide();
                    }

                    Swal.fire({
                        title: "Success",
                        text: `Coupon "${response.couponName}" applied successfully`,
                        icon: "success",
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#3085d6',
                        customClass: {
                            popup: 'swal2-custom-popup',
                            title: 'swal2-custom-title',
                            content: 'swal2-custom-content'
                        }
                    });
                } else {
                    Swal.fire({
                        title: "Error",
                        text: response.error || "Invalid coupon code",
                        icon: "error",
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#3085d6',
                        customClass: {
                            popup: 'swal2-custom-popup',
                            title: 'swal2-custom-title',
                            content: 'swal2-custom-content'
                        }
                    });
                }
            } catch (error) {
                const errorMessage = error.responseJSON?.error || "Failed to apply coupon. Please try again.";
                Swal.fire({
                    title: "Error",
                    text: errorMessage,
                    icon: "error",
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        popup: 'swal2-custom-popup',
                        title: 'swal2-custom-title',
                        content: 'swal2-custom-content'
                    }
                });
            }
        }

        async function clearCart() {
            if (!csrfToken) {
                return;
            }

            try {
                await $.ajax({
                    url: "/clearCart",
                    method: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({
                        userId: '<%= user._id %>',
                        _csrf: csrfToken
                    })
                });
            } catch (error) {
                console.error('clearCart: Error clearing cart:', error);
            }
        }

        async function placeOrder(userId) {

            if (!csrfToken) {
                Swal.fire({
                    title: "Error",
                    text: "CSRF token is missing. Please refresh the page and try again.",
                    icon: "error",
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        popup: 'swal2-custom-popup',
                        title: 'swal2-custom-title',
                        content: 'swal2-custom-content'
                    }
                });
                return;
            }

            const address = $("input[name='selectedAddress']:checked").val();
            const totalPrice = parseFloat(
                document.getElementById("totalValue").textContent.replace("â‚¹", "")
            );
            const paymentMethod = $("input[name='payment_option']:checked").val();
            const walletBalance = parseFloat('<%= walletBalance ? walletBalance : 0 %>');

            if (!address) {
                Swal.fire({
                    title: "No Address Selected",
                    text: "Please select a delivery address.",
                    icon: "error",
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        popup: 'swal2-custom-popup',
                        title: 'swal2-custom-title',
                        content: 'swal2-custom-content'
                    }
                });
                return;
            }

            if (paymentMethod === "wallet" && walletBalance < totalPrice) {
                Swal.fire({
                    title: "Insufficient Wallet Balance",
                    text: "Your wallet does not have enough funds to complete this order.",
                    icon: "error",
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        popup: 'swal2-custom-popup',
                        title: 'swal2-custom-title',
                        content: 'swal2-custom-content'
                    }
                });
                return;
            }

            try {
                const response = await $.ajax({
                    url: "/orderPlaced",
                    method: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({
                        totalPrice,
                        addressId: address,
                        paymentMethod,
                        couponApplied: appliedCoupon ? appliedCoupon.couponName : '',
                        discount: appliedCoupon ? appliedCoupon.discount : 0,
                        _csrf: csrfToken,
                    })
                });

                if (response.error) {
                    Swal.fire({
                        title: "Error",
                        text: response.error || "Failed to place order.",
                        icon: "error",
                        confirmButtonText: "OK",
                        confirmButtonColor: '#3085d6',
                        customClass: {
                            popup: 'swal2-custom-popup',
                            title: 'swal2-custom-title',
                            content: 'swal2-custom-content'
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.reload();
                        }
                    });
                    return;
                }

                if (response.method === "cod" || response.method === "wallet") {
                    await clearCart();
                    Swal.fire({
                        title: "Order Success",
                        text: "Order placed successfully",
                        icon: "success",
                        showCancelButton: true,
                        confirmButtonText: "View Order",
                        cancelButtonText: "Continue Shopping",
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#6c757d',
                        customClass: {
                            popup: 'swal2-custom-popup',
                            title: 'swal2-custom-title',
                            content: 'swal2-custom-content'
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            location.href = `/orderDetails?id=${response.orderId}`;
                        } else {
                            location.href = "/shop";
                        }
                    });
                } else if (response.method === "razorpay") {
                    const options = {
                        key: response.key,
                        amount: response.amount,
                        currency: "INR",
                        name: "Male Fashion",
                        description: "Order Payment",
                        order_id: response.razorpayOrderId,
                        handler: async function (razorpayResponse) {
                            try {
                                const verifyResponse = await $.ajax({
                                    url: "/verifyPayment",
                                    method: "POST",
                                    contentType: "application/json",
                                    data: JSON.stringify({
                                        orderId: response.orderId,
                                        razorpay_payment_id: razorpayResponse.razorpay_payment_id,
                                        razorpay_order_id: razorpayResponse.razorpay_order_id,
                                        razorpay_signature: razorpayResponse.razorpay_signature,
                                        _csrf: csrfToken
                                    })
                                });

                                if (verifyResponse.success) {
                                    await clearCart();
                                    Swal.fire({
                                        title: "Payment Success",
                                        text: "Order placed successfully",
                                        icon: "success",
                                        showCancelButton: true,
                                        confirmButtonText: "View Order",
                                        cancelButtonText: "Continue Shopping",
                                        confirmButtonColor: '#3085d6',
                                        cancelButtonColor: '#6c757d',
                                        customClass: {
                                            popup: 'swal2-custom-popup',
                                            title: 'swal2-custom-title',
                                            content: 'swal2-custom-content'
                                        }
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            location.href = `/orderDetails?id=${verifyResponse.orderId}`;
                                        } else {
                                            location.href = "/shop";
                                        }
                                    });
                                } else {
                                    await clearCart();
                                    await changeStatus({ orderId: response.orderId, status: 'online', _csrf: csrfToken });
                                    location.href = `/paymentFailed?orderId=${response.orderId}`;
                                }
                            } catch (error) {
                                await clearCart();
                                await changeStatus({ orderId: response.orderId, status: 'online', _csrf: csrfToken });
                                location.href = `/paymentFailed?orderId=${response.orderId}`;
                            }
                        },
                        prefill: {
                            name: "<%= user.name %>",
                            email: "<%= user.email %>",
                            contact: "<%= userAddress && userAddress.address.length > 0 ? userAddress.address[0].phone : '' %>",
                        },
                        theme: {
                            color: "#111111",
                        },
                        modal: {
                            ondismiss: async function () {
                                await clearCart();
                                await changeStatus({ orderId: response.orderId, status: 'online', _csrf: csrfToken });
                                location.href = `/paymentFailed?orderId=${response.orderId}`;
                            }
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.on('payment.failed', async function (razorpayResponse) {
                        await changeStatus({ orderId: response.orderId, status: 'online', _csrf: csrfToken });
                        await clearCart();
                        location.href = `/paymentFailed?orderId=${response.orderId}`;
                    });
                    rzp.open();
                }
            } catch (error) {
                Swal.fire({
                    title: "Error",
                    text: error.responseJSON?.error || "Failed to place order.",
                    icon: "error",
                    confirmButtonText: "OK",
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        popup: 'swal2-custom-popup',
                        title: 'swal2-custom-title',
                        content: 'swal2-custom-content'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        // location.href = "/shop";
                        window.location.href = "/cart";  
                    }
                });
            }
        }

        async function changeStatus(params) {
            if (!csrfToken) {
                console.error('changeStatus: CSRF token is missing');
                return;
            }

            try {
                await $.ajax({
                    url: "/changeOrderStatus",
                    method: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(params)
                });
            } catch (error) {
                console.error('changeStatus: Error updating status:', error);
            }
        }
    </script>
</body>
</html>
