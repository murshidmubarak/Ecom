<%- include("../../views/partials/user/header") %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payment Failed | Male-Fashion</title>

    <!-- Google Font -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">

    <!-- CSS Styles -->
    <link rel="stylesheet" href="/css/bootstrap.min.css" type="text/css">
    <link rel="stylesheet" href="/css/font-awesome.min.css" type="text/css">
    <link rel="stylesheet" href="/css/elegant-icons.css" type="text/css">
    <link rel="stylesheet" href="/css/magnific-popup.css" type="text/css">
    <link rel="stylesheet" href="/css/nice-select.css" type="text/css">
    <link rel="stylesheet" href="/css/owl.carousel.min.css" type="text/css">
    <link rel="stylesheet" href="/css/slicknav.min.css" type="text/css">
    <link rel="stylesheet" href="/css/style.css" type="text/css">

    <!-- SweetAlert2 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

    <!-- Razorpay Checkout Script -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    

    <style>
        body {
            padding-top: 120px;
            font-family: 'Nunito Sans', sans-serif;
            background-color: #f5f5f5;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        .payment-failed-container {
            max-width: 600px;
            width: 100%;
            padding: 40px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        .payment-failed-container h4 {
            font-weight: 700;
            color: #111111;
            margin-bottom: 20px;
            position: relative;
        }
        .payment-failed-container h4::after {
            content: '';
            width: 50px;
            height: 3px;
            background: #111111;
            position: absolute;
            bottom: -5px;
            left: 50%;
            transform: translateX(-50%);
        }
        .payment-failed-container p {
            color: #e74c3c;
            font-size: 1.1rem;
            margin-bottom: 30px;
        }
        .btn-primary {
            background-color: #111111;
            border: none;
            padding: 12px 20px;
            font-weight: 600;
            color: #fff;
            border-radius: 5px;
            transition: background-color 0.3s ease;
            margin: 0 10px;
        }
        .btn-primary:hover {
            background-color: #333333;
        }
        .btn-secondary {
            background-color: #6c757d;
            border: none;
            padding: 12px 20px;
            font-weight: 600;
            color: #fff;
            border-radius: 5px;
            transition: background-color 0.3s ease;
            margin: 0 10px;
        }
        .btn-secondary:hover {
            background-color: #5a6268;
        }
        .swal2-custom-popup {
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        .swal2-custom-title {
            font-size: 1.5rem;
            color: #111111;
        }
        .swal2-custom-content {
            font-size: 1rem;
            color: #333;
        }
        @media (max-width: 768px) {
            body {
                padding-top: 100px;
            }
            .payment-failed-container {
                padding: 20px;
                margin: 20px;
            }
            .btn-primary, .btn-secondary {
                width: 100%;
                margin: 10px 0;
            }
        }
    </style>
</head>
<body>
    <!-- Payment Failed Section -->
    <section class="payment-failed-container">
        <h4>Payment Failed</h4>
        <p><%= errorMessage || 'An error occurred during payment. Please try again or view order details.' %></p>
        <div class="d-flex justify-content-center flex-wrap gap-3">
            <% if (orderId && user) { %>
                <button class="btn btn-primary" onclick="retryPayment('<%= orderId %>')">Retry Payment</button>
                <button class="btn btn-secondary" onclick="viewDetails('<%= orderId %>')">View Details</button>
            <% } else { %>
                <a href="/shop" class="btn btn-primary">Continue Shopping</a>
            <% } %>
        </div>
    </section>

    <!-- Scripts -->
    <script src="/js/jquery-3.3.1.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="/js/jquery.nice-select.min.js"></script>
    <script src="/js/jquery.nicescroll.min.js"></script>
    <script src="/js/jquery.magnific-popup.min.js"></script>
    <script src="/js/jquery.countdown.min.js"></script>
    <script src="/js/jquery.slicknav.js"></script>
    <script src="/js/mixitup.min.js"></script>
    <script src="/js/owl.carousel.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <script src="/js/main.js"></script>

    <script>
        console.log('paymentFailed.ejs loaded at:', new Date().toISOString());
        console.log('Order ID:', '<%= orderId %>');
        console.log('Error Message:', '<%= errorMessage %>');
        console.log('User:', '<%= user ? user.name : "No user" %>');
        console.log('User Address:', '<%= JSON.stringify(userAddress) %>');
        console.log('Razorpay available:', typeof Razorpay !== 'undefined');

        async function retryPayment(orderId) {
            console.log('retryPayment: Initiated for orderId:', orderId);
            if (!orderId) {
                console.error('retryPayment: No orderId provided');
                Swal.fire({
                    title: "Error",
                    text: "No order ID provided for retry payment.",
                    icon: "error",
                    confirmButtonText: "OK",
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        popup: 'swal2-custom-popup',
                        title: 'swal2-custom-title',
                        content: 'swal2-custom-content'
                    }
                });
                return;
            }

            if (typeof Razorpay === 'undefined') {
                console.error('retryPayment: Razorpay script not loaded');
                Swal.fire({
                    title: "Error",
                    text: "Payment gateway not loaded. Please try again later.",
                    icon: "error",
                    confirmButtonText: "OK",
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        popup: 'swal2-custom-popup',
                        title: 'swal2-custom-title',
                        content: 'swal2-custom-content'
                    }
                });
                return;
            }

            try {
                const response = await $.ajax({
                    url: `/retryPayment?orderId=${orderId}`,
                    method: "GET",
                    contentType: "application/json"
                });
                console.log('retryPayment: Response received', response);

                if (response.payment && response.method === "razorpay") {
                    const options = {
                        key: response.key,
                        amount: response.amount,
                        currency: "INR",
                        name: "Male Fashion",
                        description: "Retry Order Payment",
                        order_id: response.razorpayOrderId,
                        handler: async function (razorpayResponse) {
                            try {
                                console.log('retryPayment: Razorpay payment response', razorpayResponse);
                                const verifyResponse = await $.ajax({
                                    url: "/verifyPayment",
                                    method: "POST",
                                    contentType: "application/json",
                                    data: JSON.stringify({
                                        orderId: response.orderId,
                                        razorpay_payment_id: razorpayResponse.razorpay_payment_id,
                                        razorpay_order_id: razorpayResponse.razorpay_order_id,
                                        razorpay_signature: razorpayResponse.razorpay_signature,
                                    })
                                });

                                if (verifyResponse.success) {
                                    console.log('retryPayment: Payment verified, orderId:', verifyResponse.orderId);
                                    await clearCart();
                                    Swal.fire({
                                        title: "Payment Success",
                                        text: "Order placed successfully",
                                        icon: "success",
                                        showCancelButton: true,
                                        confirmButtonText: "View Order",
                                        cancelButtonText: "Continue Shopping",
                                        confirmButtonColor: '#3085d6',
                                        cancelButtonColor: '#6c757d',
                                        customClass: {
                                            popup: 'swal2-custom-popup',
                                            title: 'swal2-custom-title',
                                            content: 'swal2-custom-content'
                                        }
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            location.href = `/orderDetails?id=${verifyResponse.orderId}`;
                                        } else {
                                            location.href = "/shop";
                                        }
                                    });
                                } else {
                                    console.log('retryPayment: Payment verification failed', verifyResponse);
                                    await changeStatus({ orderId: response.orderId, status: 'failed' });
                                    location.href = `/paymentFailed?orderId=${response.orderId}`;
                                }
                            } catch (error) {
                                console.error("retryPayment: Payment verification error:", error);
                                await changeStatus({ orderId: response.orderId, status: 'failed' });
                                location.href = `/paymentFailed?orderId=${response.orderId}`;
                            }
                        },
                        prefill: {
                            name: "<%= user && user.name ? user.name : '' %>",
                            email: "<%= user && user.email ? user.email : '' %>",
                            contact: "<%= userAddress && userAddress.address && userAddress.address.length > 0 ? userAddress.address[0].phone : '' %>"
                        },
                        theme: {
                            color: "#111111"
                        },
                        modal: {
                            ondismiss: async function () {
                                console.log("retryPayment: Razorpay modal closed by user, orderId:", response.orderId);
                                await changeStatus({ orderId: response.orderId, status: 'failed' });
                                location.href = `/paymentFailed?orderId=${response.orderId}`;
                            }
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.on('payment.failed', async function (razorpayResponse) {
                        console.error("retryPayment: Razorpay payment failed:", razorpayResponse.error, "orderId:", response.orderId);
                        await changeStatus({ orderId: response.orderId, status: 'failed' });
                        location.href = `/paymentFailed?orderId=${response.orderId}`;
                    });
                    rzp.open();
                } else {
                    console.log('retryPayment: Invalid response', response);
                    Swal.fire({
                        title: "Error",
                        text: response.error || "Unable to initiate payment retry.",
                        icon: "error",
                        confirmButtonText: "OK",
                        confirmButtonColor: '#3085d6',
                        customClass: {
                            popup: 'swal2-custom-popup',
                            title: 'swal2-custom-title',
                            content: 'swal2-custom-content'
                        }
                    });
                }
            } catch (error) {
                console.error('retryPayment: Error', error);
                Swal.fire({
                    title: "Error",
                    text: error.responseJSON?.error || "Failed to retry payment. Please try again.",
                    icon: "error",
                    confirmButtonText: "OK",
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        popup: 'swal2-custom-popup',
                        title: 'swal2-custom-title',
                        content: 'swal2-custom-content'
                    }
                });
            }
        }

        function viewDetails(orderId) {
            console.log('viewDetails: Redirecting to order details for orderId:', orderId);
            if (!orderId) {
                Swal.fire({
                    title: "Error",
                    text: "No order ID provided.",
                    icon: "error",
                    confirmButtonText: "OK",
                    confirmButtonColor: '#3085d6',
                    customClass: {
                        popup: 'swal2-custom-popup',
                        title: 'swal2-custom-title',
                        content: 'swal2-custom-content'
                    }
                });
                return;
            }
            location.href = `/orderDetails?id=${orderId}`;
        }

        async function clearCart() {
            try {
                const userId = '<%= user && user._id ? user._id : "" %>';
                console.log('clearCart: Attempting to clear cart for user:', userId);
                if (!userId) {
                    console.error('clearCart: No user ID available');
                    return;
                }
                await $.ajax({
                    url: "/clearCart",
                    method: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({ userId })
                });
                console.log('clearCart: Cart cleared successfully');
            } catch (error) {
                console.error('clearCart: Error clearing cart:', error);
            }
        }

        async function changeStatus(params) {
            try {
                console.log('changeStatus: Sending request with params:', params);
                await $.ajax({
                    url: "/changeOrderStatus",
                    method: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(params)
                });
                console.log('changeStatus: Status updated successfully');
            } catch (error) {
                console.error('changeStatus: Error updating status:', error);
            }
        }
    </script>
</body>
</html>

